一、一些关于整型的小问题。
① C++设置多种整型数据的目的是什么？使用不同范围的需求；用一些类型可以提高效率；占用较少的内存。
② C++提供了哪些措施来防止数据超出整型的范围？警告；无符号类型；limits头文件查询范围
③ 同样代表数字33，写成 33 、 33L 和 33UL 的区别是什么？33:int，4B；33L：long，4B；33UL：unsigned long无符号
二、如果现在手边没有ASCII码表：
① 如何编写C++程序知道ASCII码为90的字符是什么？char x = 90; cout << x
② 如何编写C++程序知道换行符 \n 的ASCII码是什么？char n = '\n'; cout << (int)n
三、将长类型数据赋值给短类型数据可能会产生误差。阅读下面的程序：
#include <iostream>
using namespace std;
int main()
{
    int a = 8290;
    char ch = a;
    cout << ch << endl;

    return 0;
}
我们知道8290超出了 char 类型的表示范围，因此结果必然不是8290。那么：
① 程序输出是什么字符？它的ASCII码是多少？'b' 98
② 为什么 ch 的值是这个，而不是其他的值？8290=(10000001100010)2, 截断后8位01100010对应98，对应'b'
③ 你能从中总结出什么规律？请你再举一个例子验证。长类型赋值给短类型会截断高位保留低位
例子：
#include <iostream>
using namespace std;
int main() {
    int a = 1000;     
    char ch = a;         
    cout << (int)ch << endl; 
    return 0;
}




